{"remainingRequest":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\src\\components\\HelloWorld.vue?vue&type=template&id=469af010&","dependencies":[{"path":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\src\\components\\HelloWorld.vue","mtime":1582609321928},{"path":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\xampp\\htdocs\\vue-cli\\project_food_truck\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}